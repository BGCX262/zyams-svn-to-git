package com.zhiye.common.bean;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZyNavigationParams {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public ZyNavigationParams() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    protected ZyNavigationParams(ZyNavigationParams example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table zy_navigation
     *
     * @abatorgenerated Fri Mar 23 14:39:07 CST 2012
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andNaviIdIsNull() {
            addCriterion("navi_id is null");
            return this;
        }

        public Criteria andNaviIdIsNotNull() {
            addCriterion("navi_id is not null");
            return this;
        }

        public Criteria andNaviIdEqualTo(Integer value) {
            addCriterion("navi_id =", value, "naviId");
            return this;
        }

        public Criteria andNaviIdNotEqualTo(Integer value) {
            addCriterion("navi_id <>", value, "naviId");
            return this;
        }

        public Criteria andNaviIdGreaterThan(Integer value) {
            addCriterion("navi_id >", value, "naviId");
            return this;
        }

        public Criteria andNaviIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("navi_id >=", value, "naviId");
            return this;
        }

        public Criteria andNaviIdLessThan(Integer value) {
            addCriterion("navi_id <", value, "naviId");
            return this;
        }

        public Criteria andNaviIdLessThanOrEqualTo(Integer value) {
            addCriterion("navi_id <=", value, "naviId");
            return this;
        }

        public Criteria andNaviIdIn(List values) {
            addCriterion("navi_id in", values, "naviId");
            return this;
        }

        public Criteria andNaviIdNotIn(List values) {
            addCriterion("navi_id not in", values, "naviId");
            return this;
        }

        public Criteria andNaviIdBetween(Integer value1, Integer value2) {
            addCriterion("navi_id between", value1, value2, "naviId");
            return this;
        }

        public Criteria andNaviIdNotBetween(Integer value1, Integer value2) {
            addCriterion("navi_id not between", value1, value2, "naviId");
            return this;
        }

        public Criteria andNaviNameIsNull() {
            addCriterion("navi_name is null");
            return this;
        }

        public Criteria andNaviNameIsNotNull() {
            addCriterion("navi_name is not null");
            return this;
        }

        public Criteria andNaviNameEqualTo(String value) {
            addCriterion("navi_name =", value, "naviName");
            return this;
        }

        public Criteria andNaviNameNotEqualTo(String value) {
            addCriterion("navi_name <>", value, "naviName");
            return this;
        }

        public Criteria andNaviNameGreaterThan(String value) {
            addCriterion("navi_name >", value, "naviName");
            return this;
        }

        public Criteria andNaviNameGreaterThanOrEqualTo(String value) {
            addCriterion("navi_name >=", value, "naviName");
            return this;
        }

        public Criteria andNaviNameLessThan(String value) {
            addCriterion("navi_name <", value, "naviName");
            return this;
        }

        public Criteria andNaviNameLessThanOrEqualTo(String value) {
            addCriterion("navi_name <=", value, "naviName");
            return this;
        }

        public Criteria andNaviNameLike(String value) {
            addCriterion("navi_name like", value, "naviName");
            return this;
        }

        public Criteria andNaviNameNotLike(String value) {
            addCriterion("navi_name not like", value, "naviName");
            return this;
        }

        public Criteria andNaviNameIn(List values) {
            addCriterion("navi_name in", values, "naviName");
            return this;
        }

        public Criteria andNaviNameNotIn(List values) {
            addCriterion("navi_name not in", values, "naviName");
            return this;
        }

        public Criteria andNaviNameBetween(String value1, String value2) {
            addCriterion("navi_name between", value1, value2, "naviName");
            return this;
        }

        public Criteria andNaviNameNotBetween(String value1, String value2) {
            addCriterion("navi_name not between", value1, value2, "naviName");
            return this;
        }
    }
}