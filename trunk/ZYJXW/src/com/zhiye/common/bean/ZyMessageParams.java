package com.zhiye.common.bean;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZyMessageParams {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public ZyMessageParams() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    protected ZyMessageParams(ZyMessageParams example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table zy_message
     *
     * @abatorgenerated Thu Apr 26 21:29:17 CST 2012
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andMsgIdIsNull() {
            addCriterion("msg_id is null");
            return this;
        }

        public Criteria andMsgIdIsNotNull() {
            addCriterion("msg_id is not null");
            return this;
        }

        public Criteria andMsgIdEqualTo(Long value) {
            addCriterion("msg_id =", value, "msgId");
            return this;
        }

        public Criteria andMsgIdNotEqualTo(Long value) {
            addCriterion("msg_id <>", value, "msgId");
            return this;
        }

        public Criteria andMsgIdGreaterThan(Long value) {
            addCriterion("msg_id >", value, "msgId");
            return this;
        }

        public Criteria andMsgIdGreaterThanOrEqualTo(Long value) {
            addCriterion("msg_id >=", value, "msgId");
            return this;
        }

        public Criteria andMsgIdLessThan(Long value) {
            addCriterion("msg_id <", value, "msgId");
            return this;
        }

        public Criteria andMsgIdLessThanOrEqualTo(Long value) {
            addCriterion("msg_id <=", value, "msgId");
            return this;
        }

        public Criteria andMsgIdIn(List values) {
            addCriterion("msg_id in", values, "msgId");
            return this;
        }

        public Criteria andMsgIdNotIn(List values) {
            addCriterion("msg_id not in", values, "msgId");
            return this;
        }

        public Criteria andMsgIdBetween(Long value1, Long value2) {
            addCriterion("msg_id between", value1, value2, "msgId");
            return this;
        }

        public Criteria andMsgIdNotBetween(Long value1, Long value2) {
            addCriterion("msg_id not between", value1, value2, "msgId");
            return this;
        }

        public Criteria andSendTimeIsNull() {
            addCriterion("send_time is null");
            return this;
        }

        public Criteria andSendTimeIsNotNull() {
            addCriterion("send_time is not null");
            return this;
        }

        public Criteria andSendTimeEqualTo(Date value) {
            addCriterion("send_time =", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeNotEqualTo(Date value) {
            addCriterion("send_time <>", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeGreaterThan(Date value) {
            addCriterion("send_time >", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("send_time >=", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeLessThan(Date value) {
            addCriterion("send_time <", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeLessThanOrEqualTo(Date value) {
            addCriterion("send_time <=", value, "sendTime");
            return this;
        }

        public Criteria andSendTimeIn(List values) {
            addCriterion("send_time in", values, "sendTime");
            return this;
        }

        public Criteria andSendTimeNotIn(List values) {
            addCriterion("send_time not in", values, "sendTime");
            return this;
        }

        public Criteria andSendTimeBetween(Date value1, Date value2) {
            addCriterion("send_time between", value1, value2, "sendTime");
            return this;
        }

        public Criteria andSendTimeNotBetween(Date value1, Date value2) {
            addCriterion("send_time not between", value1, value2, "sendTime");
            return this;
        }

        public Criteria andMsgRemarkIsNull() {
            addCriterion("msg_remark is null");
            return this;
        }

        public Criteria andMsgRemarkIsNotNull() {
            addCriterion("msg_remark is not null");
            return this;
        }

        public Criteria andMsgRemarkEqualTo(String value) {
            addCriterion("msg_remark =", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkNotEqualTo(String value) {
            addCriterion("msg_remark <>", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkGreaterThan(String value) {
            addCriterion("msg_remark >", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkGreaterThanOrEqualTo(String value) {
            addCriterion("msg_remark >=", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkLessThan(String value) {
            addCriterion("msg_remark <", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkLessThanOrEqualTo(String value) {
            addCriterion("msg_remark <=", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkLike(String value) {
            addCriterion("msg_remark like", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkNotLike(String value) {
            addCriterion("msg_remark not like", value, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkIn(List values) {
            addCriterion("msg_remark in", values, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkNotIn(List values) {
            addCriterion("msg_remark not in", values, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkBetween(String value1, String value2) {
            addCriterion("msg_remark between", value1, value2, "msgRemark");
            return this;
        }

        public Criteria andMsgRemarkNotBetween(String value1, String value2) {
            addCriterion("msg_remark not between", value1, value2, "msgRemark");
            return this;
        }
    }
}